//import java.util.Properties
//import java.io.FileInputStream
//
//plugins {
//    id "com.android.application"
//    id "kotlin-android"
//    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
//    id "dev.flutter.flutter-gradle-plugin"
//    id 'com.google.gms.google-services'
//}
//
//android {
//    namespace = "com.elsner.econnect"
//    compileSdk = flutter.compileSdkVersion
//    ndkVersion = flutter.ndkVersion
//
//    compileOptions {
//        sourceCompatibility = JavaVersion.VERSION_1_8
//        targetCompatibility = JavaVersion.VERSION_1_8
//    }
//
//    kotlinOptions {
//        jvmTarget = JavaVersion.VERSION_1_8
//    }
//
//    defaultConfig {
//        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
//        applicationId = "com.elsner.econnect"
//        // You can update the following values to match your application needs.
//        // For more information, see: https://flutter.dev/to/review-gradle-config.
//        minSdk = flutter.minSdkVersion
//        targetSdk = flutter.targetSdkVersion
//        versionCode = flutter.versionCode
//        versionName = flutter.versionName
//    }
//    def keystoreProperties = new Properties()
//    def keystorePropertiesFile = rootProject.file("key.properties")
//
//    if (keystorePropertiesFile.exists()) {
//        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
//    }
//    signingConfigs {
//        create("release") {
//            keyAlias = keystoreProperties["keyAlias"]
//            keyPassword = keystoreProperties["keyPassword"]
//            storeFile = keystoreProperties["storeFile"]?.let { file(it) }
//            storePassword = keystoreProperties["storePassword"]
//        }
//    }
//    buildTypes {
//        release {
//            // TODO: Add your own signing config for the release build.
//            // Signing with the debug keys for now, so `flutter run --release` works.
////            signingConfig = signingConfigs.debug
//            signingConfig = signingConfigs.getByName("release")
//        }
//    }
//}
//
//flutter {
//    source = "../.."
//}
//
//dependencies {
//    // Import the Firebase BoM
//    implementation platform('com.google.firebase:firebase-bom:33.10.0')
//    // TODO: Add the dependencies for Firebase products you want to use
//    // When using the BoM, don't specify versions in Firebase dependencies
//    implementation 'com.google.firebase:firebase-analytics'
//    // Add the dependencies for any other desired Firebase products
//    // https://firebase.google.com/docs/android/setup#available-libraries
//}
import java.util.Properties
import java.io.FileInputStream

plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
    id 'com.google.gms.google-services'
}

android {
    namespace = "com.elsner.econnect"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "com.elsner.econnect"
        minSdk = 23
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    // Load Keystore Properties
    def keystoreProperties = new Properties()
    def keystorePropertiesFile = rootProject.file("key.properties")

    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties["keyAlias"]
            keyPassword keystoreProperties["keyPassword"]
            storeFile keystoreProperties["storeFile"] ? file(keystoreProperties["storeFile"]) : null
            storePassword keystoreProperties["storePassword"]
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:33.10.0')
    // Firebase dependencies
    implementation 'com.google.firebase:firebase-analytics'
}
